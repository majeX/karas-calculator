{"version":3,"sources":["karas.svg","serviceWorker.ts","Farewell/Farewell.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Farewell","className","to","src","karas","alt","href","ReactDOM","render","StrictMode","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,mC,mMCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iCCwBSC,EAjCa,WAC1B,OACE,yBAAKC,UAAU,gBACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAAMC,GAAG,KACP,yBAAKC,IAAKC,IAAOH,UAAU,WAAWI,IAAI,WAG9C,iCACE,4CACA,qLAGA,8gBAGA,2UAGA,ycAGA,mSACoD,uBAAGC,KAAK,8BAAR,uBADpD,KAGA,2KCvBRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAUE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,UAKRC,SAASC,eAAe,SF6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7d7e9ab0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/karas.58446c0d.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Farewell.css';\nimport '../App.css';\nimport karas from '../karas.svg';\n\ntype Props = {};\n\nconst Farewell: FC<Props> = () => {\n  return (\n    <div className=\"App Farewell\">\n      <header className=\"App-header\">\n        <Link to=\"/\">\n          <img src={karas} className=\"App-logo\" alt=\"logo\" />\n        </Link>\n      </header>\n      <section>\n        <h3>üòî</h3>\n        <h4>\n          –ù—É –≤–æ—Ç –≤–µ—Å–µ–ª—å–µ –∏ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.\n        </h4>\n        <h5>\n          –Ø, –∫–æ–Ω–µ—á–Ω–æ, –¥–µ–ª–∞–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞–Ω–∞, –Ω–æ —è –∑–Ω–∞—é, —á—Ç–æ –≤—ã —Ç–æ–∂–µ –∏–º –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å.\n        </h5>\n        <h5>\n          –û–Ω —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è, –∑–∞–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∏ –ø–æ –ø—Ä–∏–∫–æ–ª—É.\n        </h5>\n        <h5>\n          –ú–Ω–æ–≥–∏–µ –∏–∑ –Ω–∞—Å –Ω–µ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –∏–≥—Ä—É –±–µ–∑ —ç—Ç–æ–π –≤–µ—Å—ë–ª–æ–π –¥–≤–∏–∂—É—Ö–∏ –≤ –∫–ª–∞–Ω–∞—Ö ‚Äì –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ.\n        </h5>\n        <h5>\n          –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—é ‚Äì –ø–∏—à–∏—Ç–µ –Ω–∞ <a href=\"mailto:majex.exe@gmail.com\">majex.exe@gmail.com</a>.\n        </h5>\n        <h5>\n          –£–≤–∏–¥–∏–º—Å—è –≤ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–∞—Ö ü§ò\n        </h5>\n      </section>\n    </div>\n  );\n};\n\nexport default Farewell;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import Changelog from './Changelog/Changelog';\n// import Clanquest from './Clanquest/Clanquest';\nimport Farewell from './Farewell/Farewell';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Switch>\n        {/*<Route path=\"/changelog\">*/}\n        {/*  <Changelog />*/}\n        {/*</Route>*/}\n        {/*<Route path=\"/clanquest\">*/}\n        {/*  <Clanquest />*/}\n        {/*</Route>*/}\n        {/*<Route path=\"/\">*/}\n        {/*  <App />*/}\n        {/*</Route>*/}\n        <Route path=\"/\">\n          <Farewell />\n        </Route>\n      </Switch>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}