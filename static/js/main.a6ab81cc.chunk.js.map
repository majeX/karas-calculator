{"version":3,"sources":["karas.svg","calculate.ts","MultiplierInput.tsx","Form.tsx","Results.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","intOrEmpty","value","parseInt","calculate","c1","c2","c3","xMax","Math","floor","results","x","y","Number","isInteger","push","calculateSingular","result","MultiplierInput","id","onChange","onAdd","useState","isActive","setIsActive","className","name","type","min","autoFocus","e","console","log","target","onClick","Form","targetPoints","onTargetPointsChange","multipliers","onMultipliersChange","adBonus","onAdBonusChange","numOfMultipliers","setNumOfMultipliers","placeholder","Array","fill","map","_","key","undefined","prevState","ResultLine","Results","Object","values","join","App","setTargetPoints","setMultipliers","setAdBonus","calcResults","setCalcResults","calculateResults","useCallback","multipliersArray","length","calculated","allResults","multIndex","mult","singular","first","second","uniqWith","isEqual","calculateAll","bonus","bonusMultipliers","lodash","sortBy","uniq","getAllMultipliers","filter","multiplier","src","karas","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a6ab81cc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/karas.58446c0d.svg\";","import lodash, { uniqWith, isEqual } from 'lodash';\n\ntype Result = { x: number, y: number, c1: number, c2: number, c3: number };\ntype Calculator = (c1: number, c2: number, c3: number) => Array<Result>;\n\nexport const intOrEmpty = (value: string) => value === '' ? value : parseInt(value);\n\nexport const calculate: Calculator = (c1, c2, c3) => {\n  if (c1 === 0) { return [] }\n  if (c2 === 0) { return [] }\n  const xMax = Math.floor(c3 / c1);\n  const results = [];\n\n  for (let x = 3; x <= xMax; x++) {\n    let y = c3 / c2 - (c1 / c2) * x;\n    if (Number.isInteger(y) && y > 2) {\n      results.push({\n        x,\n        y,\n        c1,\n        c2,\n        c3\n      });\n    }\n  }\n  return results;\n};\n\nexport const calculateSingular = (c1: number, c3: number) => {\n  if (c1 === 0) { return null }\n  const result = c3 / c1;\n  return Number.isInteger(result) ? result : null;\n};\n\nexport const getAllMultipliers = (multipliers: Array<number>, bonus: number) => {\n  const bonusMultipliers = multipliers.map(mult => mult + bonus);\n  return lodash([...multipliers, ...bonusMultipliers])\n    .sortBy()\n    .uniq()\n    .value()\n};\n\nexport const calculateAll = (multipliers: Array<number>, target: number) => {\n  const allResults = [];\n  for(let multIndex = 0; multIndex < multipliers.length; multIndex++) {\n    const mult = multipliers[multIndex];\n    const singular = calculateSingular(mult, target);\n    if (singular !== null) { allResults.push({ x: singular, y: null, c1: mult, c2: null, c3: target }) }\n  }\n\n  for (let first = 0; first < multipliers.length - 1; first++) {\n    const c1 = multipliers[first];\n    for (let second = first + 1; second < multipliers.length; second++) {\n      const c2 = multipliers[second];\n      console.log('c1', c1, 'c2', c2);\n      allResults.push(...calculate(c1, c2, target));\n    }\n  }\n  return uniqWith(allResults, isEqual);\n};\nexport type CalcResults = ReturnType<typeof calculateAll>;\n\n","import React, { useState } from 'react';\n\nimport \"./MultiplierInput.css\";\nimport { intOrEmpty } from './calculate';\n\ntype Props = {\n  id: number,\n  value: number | '',\n  onChange(value: number | ''): void,\n  onAdd(): void,\n};\n\nconst MultiplierInput: React.FC<Props> = ({\n  id,\n  value,\n  onChange,\n  onAdd,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div className=\"b-MultiplierInput\">\n      {isActive\n        ? <input\n            name={`multiplier-${id}`}\n            type=\"number\"\n            min={0}\n            autoFocus\n            value={value}\n            onChange={(e) => { console.log(intOrEmpty(e.target.value)); onChange(intOrEmpty(e.target.value)) } }\n          />\n        : <div onClick={() => { setIsActive(true); onAdd() }}>+</div>\n      }\n    </div>\n  );\n}\n\nexport default MultiplierInput;\n","import React, { useState } from 'react';\n\nimport MultiplierInput from './MultiplierInput';\nimport { Multipliers } from './App';\nimport './Form.css';\nimport { intOrEmpty } from './calculate';\n\ntype Props = {\n  multipliers: Multipliers,\n  onMultipliersChange(value: Multipliers): void,\n\n  targetPoints: number | '',\n  onTargetPointsChange(value: number | ''): void,\n\n  adBonus: number | '',\n  onAdBonusChange(value: number | ''): void,\n};\n\nconst Form: React.FC<Props> = ({\n  targetPoints,\n  onTargetPointsChange,\n\n  multipliers,\n  onMultipliersChange,\n\n  adBonus,\n  onAdBonusChange,\n}) => {\n  const [numOfMultipliers, setNumOfMultipliers] = useState(0);\n  return (\n    <div>\n      <div className=\"b-Form__line\">\n        <div className=\"b-Form__caption\">\n          Сколько нужно набрать\n        </div>\n        <input\n          name=\"targetPoints\"\n          type=\"number\"\n          placeholder=\"0\"\n          value={targetPoints}\n          onChange={(e) => onTargetPointsChange(intOrEmpty(e.target.value))}\n        />\n      </div>\n      <div className=\"b-Form__line\">\n        <div className=\"b-Form__caption\">\n          Множители\n        </div>\n        <div className=\"b-Form__multipliers\">\n          {Array(numOfMultipliers + 1).fill(0).map((_, id) => (\n            <MultiplierInput\n              key={`mult-${id}`}\n              id={id}\n              value={multipliers[id] === undefined ?  '' : multipliers[id]}\n              onChange={(value: number) => { onMultipliersChange({ ...multipliers, [id]: value }) }}\n              onAdd={() => { setNumOfMultipliers(prevState => prevState + 1) }}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"b-Form__line\">\n        <div className=\"b-Form__caption\">\n          Бонус от рекламы\n        </div>\n        <input\n          name=\"adBonus\"\n          type=\"number\"\n          placeholder=\"0\"\n          value={adBonus}\n          onChange={(e) => onAdBonusChange(intOrEmpty(e.target.value))}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Form;\n","import React from 'react';\nimport { CalcResults } from './calculate';\nimport './Results.css';\n\ntype Props = {\n  results: CalcResults,\n};\n\nconst ResultLine: React.FC<{ result: Props['results'][0] }> = ({\n  result\n}) => (\n  <tr className=\"ResultLine\">\n    <td className=\"ResultLine__mult\">{result.c1}x</td>\n    <td className=\"ResultLine__score\">{result.x}</td>\n    {result.y !== null && (\n      <>\n        <td>&nbsp;+&nbsp;</td>\n        <td className=\"ResultLine__mult\">{result.c2}x</td>\n        <td className=\"ResultLine__score\">{result.y}</td>\n      </>\n    )}\n  </tr>\n);\n\nconst Results: React.FC<Props> = ({\n  results,\n}) => {\n  return (\n    <code>\n      <table>\n        <tbody>\n          {results.map(result => (\n            <ResultLine result={result} key={Object.values(result).join(\", \")} />\n          ))}\n        </tbody>\n      </table>\n    </code>\n  )\n};\n\nexport default Results;\n","import React, { useCallback, useState } from 'react';\n\nimport { CalcResults, calculateAll, getAllMultipliers } from './calculate';\nimport karas from './karas.svg';\nimport './App.css';\nimport Form from './Form';\nimport Results from './Results';\n\nexport type Multipliers = { [key: string]: number | '' };\n\nfunction App() {\n  const [targetPoints, setTargetPoints] = useState<number | ''>('');\n  const [multipliers, setMultipliers] = useState<Multipliers>({});\n  const [adBonus, setAdBonus] = useState<number | ''>('');\n\n  const [calcResults, setCalcResults] = useState<CalcResults>([]);\n\n  const calculateResults = useCallback(() => {\n    if (adBonus === '') return;\n    if (targetPoints === '') return;\n    const multipliersArray = Object.values(multipliers);\n    if (multipliersArray.length === 0) return;\n    const filteredMultipliers = multipliersArray.filter(multiplier => multiplier !== '');\n\n    const allMultipliers = getAllMultipliers(filteredMultipliers as number[], adBonus);\n    const calculated = calculateAll(allMultipliers, targetPoints);\n    console.log(calculated);\n    setCalcResults(calculated);\n  }, [adBonus, multipliers, targetPoints]);\n\n  console.log(multipliers);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={karas} className=\"App-logo\" alt=\"logo\" />\n      </header>\n\n      <Form\n          multipliers={multipliers}\n          onMultipliersChange={(value: Multipliers) => { setMultipliers(value) }}\n\n          targetPoints={targetPoints}\n          onTargetPointsChange={(value: number) => { setTargetPoints(value) }}\n\n          adBonus={adBonus}\n          onAdBonusChange={(value: number) => { setAdBonus(value) }}\n        />\n        <button\n          className=\"App__submit\"\n          onClick={() => calculateResults()}\n        >\n          Рассчитать\n        </button>\n        <Results\n          results={calcResults}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}